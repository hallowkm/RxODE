% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RxODE.R
\name{rx.initCmpMgr}
\alias{rx.initCmpMgr}
\title{A compilation manager for RxODE models}
\usage{
rx.initCmpMgr(model, modName, wd, extraC = NULL, debug = TRUE,
  mmod = FALSE)
}
\arguments{
\item{model}{a string containing the either the source or the file
name of the \code{RxODE} model}

\item{modName}{a string with a model identifier (this string will
be used to construct filenames and C symbols, therefore it must
be suitable for creating those identifiers); Model
specification or model file}

\item{wd}{a string with a file path to a working directory where to
create various C and object files.}

\item{extraC}{a string with a file path to an extra C file to be
included in the model.  This is useful for adding your own C
functions.}

\item{debug}{a boolean specifying if debugging is used for the
compiled code by adding -D__DEBUG__ to the compile-time
options.}

\item{mmod}{A boolean telling if the modName from \code{RxODE} was
missing.  This affects how the model is created and used.}
}
\value{
An object (closure) with the following member functions:
\item{parse}{
    this function parses (translates) the ODE-based model 
    specification and generates a C file to implement the model.}
\item{compile}{
    compiles the generated C file for the ODE system
    and dynamically loads the machine code in the shared object.}
\item{dynLoad}{
    if needed, dynamically loads the dynamic library
    produced in the \code{compile()} step.  Note that the shared
    object persists across R sessions, thus the \code{dynLoad} needs
    to be issued as needed.}
\item{dynUnload}{
    this function unloads the previously dynamically loaded
    model object code.  Mainly for internal use.}
\item{ode_solver}{
    a string with the name of the C symbol for this model solver.}
\item{dllfile}{
    a string with the name of the dynamic link (or shared object) file.}
\item{get.modelVars}{
    function that returns a list with 3 character
    vectors, \code{params}, \code{state}, and \code{lhs} of variable 
    names (identifiers) used in the model specification. 
    These will be output when the model is computed (i.e., the ODE solved).}
\item{isValid}{
    a function that (naively) checks for model validity,
    namely that the C object code reflects the latest model 
    specification.}
\item{get.index}{
    helper function to extract the index of one or
    more system variables (state, parameter, or other).}
\item{getObj}{
    internal (not user callable) function.}
}
\description{
This function parses, compiles, links, and loads the shared object
that implements an RxODE model.
}
\details{
The function parses and compiles (if needed) the \code{RxODE}
model specified in the string \code{model} into a dynamic link
library (DLL on Windows) or a shared object (\code{*.so} on
Unix-like systems).

It then dynamically loads this code into the current R
session. (Models previously parsed and compiled in previous R
sessions only need to be dynamically loaded into the current R session.)
}
\examples{
\dontrun{
  cmpMgt <- rx.initCmpMgr(model, "tst1", wd = ".")
}
}
\seealso{
\code{\link{RxODE}}
}
\concept{
ordinary differential equations
}
\keyword{ODE}
\keyword{internal}
\keyword{models}

