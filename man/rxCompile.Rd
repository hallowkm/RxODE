% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RxODE.R
\name{rxCompile}
\alias{rxCompile}
\title{Compile a model if needed}
\usage{
rxCompile(model, dir, prefix, extraC = NULL, force = FALSE,
  modName = NULL, ...)
}
\arguments{
\item{model}{This can be either a string specifying a file name for
the RxODE code, a string representing the model specification,
or an RxODE family of objects to recompile if needed.}

\item{dir}{This is the model directory where the C file will be
    stored for compiling.

    If unspecified, the C code is stored in a temporary directory,
    then the model is compiled and moved to the current directory.
    Afterwards the C code is removed.

    If specified, the C code is stored in the specified directory
    and then compiled in that directory.  The C code is not removed
    after the dll is created in the same directory.  This can be
    useful to debug the c-code outputs.}

\item{prefix}{is a string indicating the prefix to use in the C
based functions.  If missing, it is calculated based on file
name, or md5 of parsed model.}

\item{extraC}{Extra c code to include in the model.  This can be
useful to specify functions in the model.  These C functions
should usually take \code{double} precision arguments, and
return \code{double} precision values.}

\item{force}{is a boolean stating if the (re)compile should be
forced if RxODE detects that the models are the same as already
generated.}

\item{modName}{is a string specifying the model name.  This string
is used to generate the model's dll file.  If unspecified, and
the model does not come from the file, the model dll name is
based on the parsed md5.}

\item{...}{Other arguments sent to the \code{\link{rxTrans}} function.}
}
\value{
A rxdll object that has the following slots

\item{dll}{dll path}
\item{model}{model specification}
\item{.c}{A function to call C code in the correct context from the dll
         using the \code{\link{.C}} function.}
\item{.call}{A function to call C code in the correct context from the dll
         using the \code{\link{.Call}} function.}
\item{args}{A list of the arguments used to create the rxDll object.}
}
\description{
This is the compilation workhorse creating the RxODE model dll
files.
}
\seealso{
\code{\link{RxODE}}
}

